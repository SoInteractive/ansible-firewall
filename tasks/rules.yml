---
- name: register INPUT chain rules
  command: iptables -S INPUT
  register: input_chain
  changed_when: False
  tags: skip_ansible_lint

- name: flush INPUT chain if policy is ACCEPT
  command: iptables -F INPUT
  when: input_chain.stdout_lines[0] == "-P INPUT ACCEPT"

- name: allow loopback communication
  iptables:
    chain: INPUT
    in_interface: lo
    jump: ACCEPT

- name: allow all established and related connections
  iptables:
    chain: INPUT
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT

- name: allow ICMP 8 (ping)
  iptables:
    chain: INPUT
    protocol: icmp
    icmp_type: 8
    ctstate: NEW,ESTABLISHED,RELATED
    jump: ACCEPT

- name: allow incoming SSH connection
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "{{ firewall_ssh_port }}"
    jump: ACCEPT

- name: allow established SSH access
  iptables:
    chain: OUTPUT
    protocol: tcp
    source_port: "{{ firewall_ssh_port }}"
    ctstate: ESTABLISHED
    jump: ACCEPT

- name: allow DNS
  iptables:
    chain: INPUT
    protocol: "{{ item }}"
    source_port: 53
    ctstate: ESTABLISHED
    jump: ACCEPT
  with_items:
    - udp
    - tcp
  when: firewall_enable_dns

- name: allow NTP
  iptables:
    chain: INPUT
    protocol: udp
    source_port: 123
    ctstate: ESTABLISHED
    jump: ACCEPT
  when: firewall_enable_ntp

- name: allow inside environment communication
  iptables:
    chain: INPUT
    source: "{{ firewall_env_subnet }}"
    jump: ACCEPT
  when: firewall_env_subnet != ""

- name: add Docker iptables chain
  command: iptables -N DOCKER
  register: docker_chain
  changed_when: docker_chain.rc == 0
  failed_when:
  - "docker_chain.rc != 0"
  - "not 'iptables: Chain already exists.' in docker_chain.stderr"
  when: firewall_restrict_docker

- name: restrict Docker access to specific subnet
  iptables:
    chain: DOCKER
    action: insert
    protocol: tcp
    source: "! {{ firewall_env_subnet }}"
    jump: DROP
  when: firewall_restrict_docker

- name: create additional rules
  iptables:
    chain: "{{ item.chain | default('INPUT') }}"
    protocol: "{{ item.proto | default('tcp') }}"
    source: "{{ item.source | default('0.0.0.0/0')}}"
    destination_port: "{{ item.port | default('0:65535') }}"
    in_interface: "{{ item.interface | default(ansible_default_ipv4.interface) }}"
    jump: ACCEPT
  with_items: "{{ firewall_allow }}"
  notify: update firewall on debian-based machine

- name: lock non-specified incoming communication
  iptables:
    chain: INPUT
    policy: DROP
  changed_when: False
